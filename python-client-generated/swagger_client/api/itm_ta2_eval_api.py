# coding: utf-8

"""
    ITM MVP TA3 API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  Currently, there is an Evaluation API for TA2 and a preliminary scenario/probe submission API for TA1 that won't be used in the MVP, and currently lacks an API regarding sending probe responses and receiving alignment scores from TA1.  The API is based on the OpenAPI 3.0 specification.  Some aspects of this API are not necessarily planned to be implemented for MVP, but show the direction we are heading.  # noqa: E501

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ItmTa2EvalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def check_vitals(self, casualty_id, **kwargs):  # noqa: E501
        """Assess and retrieve all casualty vital signs  # noqa: E501

        Retrieve all vital signs of the specified casualty.  Not required for MVP, but anticipated as an example of finer-grained choices that may be available post-MVP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_vitals(casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str casualty_id: The ID of the casualty to query (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_vitals_with_http_info(casualty_id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_vitals_with_http_info(casualty_id, **kwargs)  # noqa: E501
            return data

    def check_vitals_with_http_info(self, casualty_id, **kwargs):  # noqa: E501
        """Assess and retrieve all casualty vital signs  # noqa: E501

        Retrieve all vital signs of the specified casualty.  Not required for MVP, but anticipated as an example of finer-grained choices that may be available post-MVP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_vitals_with_http_info(casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str casualty_id: The ID of the casualty to query (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['casualty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_vitals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `check_vitals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/checkVitals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vitals',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alignment_target(self, scenario_id, **kwargs):  # noqa: E501
        """Retrieve alignment target for the scenario  # noqa: E501

        Retrieve alignment target for the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alignment_target(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to retrieve alignment target (required)
        :return: AlignmentTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alignment_target_with_http_info(scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alignment_target_with_http_info(scenario_id, **kwargs)  # noqa: E501
            return data

    def get_alignment_target_with_http_info(self, scenario_id, **kwargs):  # noqa: E501
        """Retrieve alignment target for the scenario  # noqa: E501

        Retrieve alignment target for the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alignment_target_with_http_info(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to retrieve alignment target (required)
        :return: AlignmentTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alignment_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_alignment_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/{scenario_id}/getAlignmentTarget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlignmentTarget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_heart_rate(self, casualty_id, **kwargs):  # noqa: E501
        """Check casualty heart rate  # noqa: E501

        Check the heart rate of the specified casualty.  Not required for MVP, but anticipated as an example of finer-grained choices that may be available post-MVP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_heart_rate(casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str casualty_id: The ID of the casualty to for which to request heart rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_heart_rate_with_http_info(casualty_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_heart_rate_with_http_info(casualty_id, **kwargs)  # noqa: E501
            return data

    def get_heart_rate_with_http_info(self, casualty_id, **kwargs):  # noqa: E501
        """Check casualty heart rate  # noqa: E501

        Check the heart rate of the specified casualty.  Not required for MVP, but anticipated as an example of finer-grained choices that may be available post-MVP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_heart_rate_with_http_info(casualty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str casualty_id: The ID of the casualty to for which to request heart rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['casualty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_heart_rate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `get_heart_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/checkHeartRate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_probe(self, scenario_id, **kwargs):  # noqa: E501
        """Request a probe  # noqa: E501

        Request the next probe of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_probe(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to request a probe (required)
        :return: Probe
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_probe_with_http_info(scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_probe_with_http_info(scenario_id, **kwargs)  # noqa: E501
            return data

    def get_probe_with_http_info(self, scenario_id, **kwargs):  # noqa: E501
        """Request a probe  # noqa: E501

        Request the next probe of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_probe_with_http_info(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to request a probe (required)
        :return: Probe
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scenario_id' in params:
            query_params.append(('scenario_id', params['scenario_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/probe', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Probe',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scenario_state(self, scenario_id, **kwargs):  # noqa: E501
        """Retrieve scenario state  # noqa: E501

        Retrieve state of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scenario_state(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to retrieve status (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_scenario_state_with_http_info(scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scenario_state_with_http_info(scenario_id, **kwargs)  # noqa: E501
            return data

    def get_scenario_state_with_http_info(self, scenario_id, **kwargs):  # noqa: E501
        """Retrieve scenario state  # noqa: E501

        Retrieve state of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scenario_state_with_http_info(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to retrieve status (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scenario_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_scenario_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/{scenario_id}/getState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def respond_to_probe(self, response, **kwargs):  # noqa: E501
        """Respond to a probe  # noqa: E501

        Respond to a probe with a decision chosen from among its options  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.respond_to_probe(response, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProbeResponse response: object encapsulating the probe response (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.respond_to_probe_with_http_info(response, **kwargs)  # noqa: E501
        else:
            (data) = self.respond_to_probe_with_http_info(response, **kwargs)  # noqa: E501
            return data

    def respond_to_probe_with_http_info(self, response, **kwargs):  # noqa: E501
        """Respond to a probe  # noqa: E501

        Respond to a probe with a decision chosen from among its options  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.respond_to_probe_with_http_info(response, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProbeResponse response: object encapsulating the probe response (required)
        :return: State
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['response']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method respond_to_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'response' is set
        if ('response' not in params or
                params['response'] is None):
            raise ValueError("Missing the required parameter `response` when calling `respond_to_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'response' in params:
            query_params.append(('response', params['response']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/probe', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='State',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_scenario(self, adm_name, **kwargs):  # noqa: E501
        """Start a new scenario  # noqa: E501

        Start a new scenario with the specified ADM name, returning a Scenario object and unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_scenario(adm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str adm_name: A self-assigned ADM name.  Can add authentication later. (required)
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_scenario_with_http_info(adm_name, **kwargs)  # noqa: E501
        else:
            (data) = self.start_scenario_with_http_info(adm_name, **kwargs)  # noqa: E501
            return data

    def start_scenario_with_http_info(self, adm_name, **kwargs):  # noqa: E501
        """Start a new scenario  # noqa: E501

        Start a new scenario with the specified ADM name, returning a Scenario object and unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_scenario_with_http_info(adm_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str adm_name: A self-assigned ADM name.  Can add authentication later. (required)
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adm_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_scenario" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'adm_name' is set
        if ('adm_name' not in params or
                params['adm_name'] is None):
            raise ValueError("Missing the required parameter `adm_name` when calling `start_scenario`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'adm_name' in params:
            query_params.append(('adm_name', params['adm_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/start', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tag_casualty(self, casualty_id, tag, **kwargs):  # noqa: E501
        """Tag a casualty with a triage category  # noqa: E501

        Apply a triage tag to the specified casualty with the specified tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_casualty(casualty_id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str casualty_id: The ID of the casualty to tag (required)
        :param str tag: The tag to apply to the casualty, chosen from triage categories (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tag_casualty_with_http_info(casualty_id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.tag_casualty_with_http_info(casualty_id, tag, **kwargs)  # noqa: E501
            return data

    def tag_casualty_with_http_info(self, casualty_id, tag, **kwargs):  # noqa: E501
        """Tag a casualty with a triage category  # noqa: E501

        Apply a triage tag to the specified casualty with the specified tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_casualty_with_http_info(casualty_id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str casualty_id: The ID of the casualty to tag (required)
        :param str tag: The tag to apply to the casualty, chosen from triage categories (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['casualty_id', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tag_casualty" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'casualty_id' is set
        if ('casualty_id' not in params or
                params['casualty_id'] is None):
            raise ValueError("Missing the required parameter `casualty_id` when calling `tag_casualty`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `tag_casualty`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'casualty_id' in params:
            path_params['casualty_id'] = params['casualty_id']  # noqa: E501

        query_params = []
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta2/casualty/{casualty_id}/tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
