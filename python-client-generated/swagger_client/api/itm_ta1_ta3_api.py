# coding: utf-8

"""
    ITM MVP TA3 API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  Currently, there is an Evaluation API for TA2 and a preliminary scenario/probe submission API for TA1 that won't be used in the MVP, and currently lacks an API regarding sending probe responses and receiving alignment scores from TA1.  The API is based on the OpenAPI 3.0 specification.  Some aspects of this API are not necessarily planned to be implemented for MVP, but show the direction we are heading.  # noqa: E501

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ItmTa1Ta3Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_probe(self, body, api_key, scenario_id, **kwargs):  # noqa: E501
        """Create a new evaluation probe  # noqa: E501

        Create a new evaluation probe for the specified scenario.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_probe(body, api_key, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Probe body: Create a new evaluation probe (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :param str scenario_id: A scenario ID, as returned when adding a scenario (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_probe_with_http_info(body, api_key, scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_probe_with_http_info(body, api_key, scenario_id, **kwargs)  # noqa: E501
            return data

    def add_probe_with_http_info(self, body, api_key, scenario_id, **kwargs):  # noqa: E501
        """Create a new evaluation probe  # noqa: E501

        Create a new evaluation probe for the specified scenario.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_probe_with_http_info(body, api_key, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Probe body: Create a new evaluation probe (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :param str scenario_id: A scenario ID, as returned when adding a scenario (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_key', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_probe`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `add_probe`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `add_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta1/probe/{scenario_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_scenario(self, body, api_key, **kwargs):  # noqa: E501
        """Create a new evaluation scenario  # noqa: E501

        Create a new evaluation scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_scenario(body, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Scenario body: Create a new evaluation scenario (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_scenario_with_http_info(body, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_scenario_with_http_info(body, api_key, **kwargs)  # noqa: E501
            return data

    def add_scenario_with_http_info(self, body, api_key, **kwargs):  # noqa: E501
        """Create a new evaluation scenario  # noqa: E501

        Create a new evaluation scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_scenario_with_http_info(body, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Scenario body: Create a new evaluation scenario (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_scenario" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_scenario`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `add_scenario`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta1/scenario', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_probe(self, api_key, probe_id, **kwargs):  # noqa: E501
        """Delete an evaluation probe  # noqa: E501

        Delete an evaluation probe by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_probe(api_key, probe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :param str probe_id: A scenario ID, as returned when adding a scenario (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_probe_with_http_info(api_key, probe_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_probe_with_http_info(api_key, probe_id, **kwargs)  # noqa: E501
            return data

    def delete_probe_with_http_info(self, api_key, probe_id, **kwargs):  # noqa: E501
        """Delete an evaluation probe  # noqa: E501

        Delete an evaluation probe by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_probe_with_http_info(api_key, probe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :param str probe_id: A scenario ID, as returned when adding a scenario (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'probe_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `delete_probe`")  # noqa: E501
        # verify the required parameter 'probe_id' is set
        if ('probe_id' not in params or
                params['probe_id'] is None):
            raise ValueError("Missing the required parameter `probe_id` when calling `delete_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'probe_id' in params:
            path_params['probe_id'] = params['probe_id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta1/probe/{probe_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_scenario(self, api_key, scenario_id, **kwargs):  # noqa: E501
        """Delete an evaluation scenario  # noqa: E501

        Delete an evaluation scenario by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scenario(api_key, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :param str scenario_id: A scenario ID, as returned when adding a scenario (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_scenario_with_http_info(api_key, scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_scenario_with_http_info(api_key, scenario_id, **kwargs)  # noqa: E501
            return data

    def delete_scenario_with_http_info(self, api_key, scenario_id, **kwargs):  # noqa: E501
        """Delete an evaluation scenario  # noqa: E501

        Delete an evaluation scenario by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scenario_with_http_info(api_key, scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :param str scenario_id: A scenario ID, as returned when adding a scenario (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scenario" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `delete_scenario`")  # noqa: E501
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `delete_scenario`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scenario_id' in params:
            path_params['scenario_id'] = params['scenario_id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta1/scenario/{scenario_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ta1login(self, username, **kwargs):  # noqa: E501
        """Log in with TA3  # noqa: E501

        Start a new API session with the specified username  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ta1login(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: A self-assigned user name.  Can add authentication later. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ta1login_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.ta1login_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def ta1login_with_http_info(self, username, **kwargs):  # noqa: E501
        """Log in with TA3  # noqa: E501

        Start a new API session with the specified username  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ta1login_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: A self-assigned user name.  Can add authentication later. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ta1login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `ta1login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta1/login', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_probe(self, body, api_key, **kwargs):  # noqa: E501
        """Update an existing evaluation probe  # noqa: E501

        Update an existing evaluation probe by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_probe(body, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Probe body: new evaluation probe configuration (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_probe_with_http_info(body, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_probe_with_http_info(body, api_key, **kwargs)  # noqa: E501
            return data

    def update_probe_with_http_info(self, body, api_key, **kwargs):  # noqa: E501
        """Update an existing evaluation probe  # noqa: E501

        Update an existing evaluation probe by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_probe_with_http_info(body, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Probe body: new evaluation probe configuration (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_probe`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `update_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta1/probe', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_scenario(self, body, api_key, **kwargs):  # noqa: E501
        """Update an existing evaluation scenario  # noqa: E501

        Update an existing evaluation scenario by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scenario(body, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Scenario body: new evaluation scenario configuration (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_scenario_with_http_info(body, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_scenario_with_http_info(body, api_key, **kwargs)  # noqa: E501
            return data

    def update_scenario_with_http_info(self, body, api_key, **kwargs):  # noqa: E501
        """Update an existing evaluation scenario  # noqa: E501

        Update an existing evaluation scenario by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scenario_with_http_info(body, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Scenario body: new evaluation scenario configuration (required)
        :param str api_key: API Key received when logging in.  Can add robust authentication later. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scenario" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_scenario`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `update_scenario`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ta1/scenario', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
