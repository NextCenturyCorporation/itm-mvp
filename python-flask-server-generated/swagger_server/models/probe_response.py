# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProbeResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, scenario_id: str=None, probe_id: str=None, choice: str=None, justification: str=None):  # noqa: E501
        """ProbeResponse - a model defined in Swagger

        :param scenario_id: The scenario_id of this ProbeResponse.  # noqa: E501
        :type scenario_id: str
        :param probe_id: The probe_id of this ProbeResponse.  # noqa: E501
        :type probe_id: str
        :param choice: The choice of this ProbeResponse.  # noqa: E501
        :type choice: str
        :param justification: The justification of this ProbeResponse.  # noqa: E501
        :type justification: str
        """
        self.swagger_types = {
            'scenario_id': str,
            'probe_id': str,
            'choice': str,
            'justification': str
        }

        self.attribute_map = {
            'scenario_id': 'scenario_id',
            'probe_id': 'probe_id',
            'choice': 'choice',
            'justification': 'justification'
        }
        self._scenario_id = scenario_id
        self._probe_id = probe_id
        self._choice = choice
        self._justification = justification

    @classmethod
    def from_dict(cls, dikt) -> 'ProbeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProbeResponse of this ProbeResponse.  # noqa: E501
        :rtype: ProbeResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scenario_id(self) -> str:
        """Gets the scenario_id of this ProbeResponse.

        globally unique scenario ID  # noqa: E501

        :return: The scenario_id of this ProbeResponse.
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id: str):
        """Sets the scenario_id of this ProbeResponse.

        globally unique scenario ID  # noqa: E501

        :param scenario_id: The scenario_id of this ProbeResponse.
        :type scenario_id: str
        """
        if scenario_id is None:
            raise ValueError("Invalid value for `scenario_id`, must not be `None`")  # noqa: E501

        self._scenario_id = scenario_id

    @property
    def probe_id(self) -> str:
        """Gets the probe_id of this ProbeResponse.

        globally unique probe ID  # noqa: E501

        :return: The probe_id of this ProbeResponse.
        :rtype: str
        """
        return self._probe_id

    @probe_id.setter
    def probe_id(self, probe_id: str):
        """Sets the probe_id of this ProbeResponse.

        globally unique probe ID  # noqa: E501

        :param probe_id: The probe_id of this ProbeResponse.
        :type probe_id: str
        """
        if probe_id is None:
            raise ValueError("Invalid value for `probe_id`, must not be `None`")  # noqa: E501

        self._probe_id = probe_id

    @property
    def choice(self) -> str:
        """Gets the choice of this ProbeResponse.

        id of choice made (from ProbeOption)  # noqa: E501

        :return: The choice of this ProbeResponse.
        :rtype: str
        """
        return self._choice

    @choice.setter
    def choice(self, choice: str):
        """Sets the choice of this ProbeResponse.

        id of choice made (from ProbeOption)  # noqa: E501

        :param choice: The choice of this ProbeResponse.
        :type choice: str
        """
        if choice is None:
            raise ValueError("Invalid value for `choice`, must not be `None`")  # noqa: E501

        self._choice = choice

    @property
    def justification(self) -> str:
        """Gets the justification of this ProbeResponse.

        A justification of the response to the probe  # noqa: E501

        :return: The justification of this ProbeResponse.
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification: str):
        """Sets the justification of this ProbeResponse.

        A justification of the response to the probe  # noqa: E501

        :param justification: The justification of this ProbeResponse.
        :type justification: str
        """

        self._justification = justification
