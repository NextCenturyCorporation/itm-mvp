# coding: utf-8

"""
    ITM MVP TA3 API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  Currently, there is an Evaluation API for TA2 and a preliminary scenario/probe submission API for TA1 that won't be used in the MVP, and currently lacks an API regarding sending probe responses and receiving alignment scores from TA1.  The API is based on the OpenAPI 3.0 specification.  Some objects and operations are not necessarily planned to be implemented for MVP, but show the direction we are heading.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProbeOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'value': 'str',
        'kdma_association': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'kdma_association': 'kdma_association'
    }

    def __init__(self, id=None, value=None, kdma_association=None):  # noqa: E501
        """ProbeOption - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._value = None
        self._kdma_association = None
        self.discriminator = None
        self.id = id
        self.value = value
        if kdma_association is not None:
            self.kdma_association = kdma_association

    @property
    def id(self):
        """Gets the id of this ProbeOption.  # noqa: E501

        the choice id, having scenario scope  # noqa: E501

        :return: The id of this ProbeOption.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProbeOption.

        the choice id, having scenario scope  # noqa: E501

        :param id: The id of this ProbeOption.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this ProbeOption.  # noqa: E501

        a label for the choice  # noqa: E501

        :return: The value of this ProbeOption.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProbeOption.

        a label for the choice  # noqa: E501

        :param value: The value of this ProbeOption.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def kdma_association(self):
        """Gets the kdma_association of this ProbeOption.  # noqa: E501

        KDMA association of this option; always omitted in TA2 API.  # noqa: E501

        :return: The kdma_association of this ProbeOption.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._kdma_association

    @kdma_association.setter
    def kdma_association(self, kdma_association):
        """Sets the kdma_association of this ProbeOption.

        KDMA association of this option; always omitted in TA2 API.  # noqa: E501

        :param kdma_association: The kdma_association of this ProbeOption.  # noqa: E501
        :type: dict(str, str)
        """

        self._kdma_association = kdma_association

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProbeOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProbeOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
