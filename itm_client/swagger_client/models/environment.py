# coding: utf-8

"""
    ITM TA3 MVP API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  It is based on the OpenAPI 3.0 specification.  Some objects and operations are not necessarily planned for the MVP, but are currently present for fostering discussion.  The API is currently in an early/draft state, even for an MVP.  # noqa: E501

    OpenAPI spec version: 0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Environment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'weather': 'str',
        'location': 'str',
        'visibility': 'float',
        'noise_ambient': 'float',
        'noise_peak': 'float',
        'threat_level': 'float'
    }

    attribute_map = {
        'weather': 'weather',
        'location': 'location',
        'visibility': 'visibility',
        'noise_ambient': 'noise_ambient',
        'noise_peak': 'noise_peak',
        'threat_level': 'threat_level'
    }

    def __init__(self, weather=None, location=None, visibility=None, noise_ambient=None, noise_peak=None, threat_level=None):  # noqa: E501
        """Environment - a model defined in Swagger"""  # noqa: E501
        self._weather = None
        self._location = None
        self._visibility = None
        self._noise_ambient = None
        self._noise_peak = None
        self._threat_level = None
        self.discriminator = None
        if weather is not None:
            self.weather = weather
        if location is not None:
            self.location = location
        if visibility is not None:
            self.visibility = visibility
        if noise_ambient is not None:
            self.noise_ambient = noise_ambient
        if noise_peak is not None:
            self.noise_peak = noise_peak
        if threat_level is not None:
            self.threat_level = threat_level

    @property
    def weather(self):
        """Gets the weather of this Environment.  # noqa: E501

        a text description of local weather conditions  # noqa: E501

        :return: The weather of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this Environment.

        a text description of local weather conditions  # noqa: E501

        :param weather: The weather of this Environment.  # noqa: E501
        :type: str
        """

        self._weather = weather

    @property
    def location(self):
        """Gets the location of this Environment.  # noqa: E501

        a general natural language description of where the scenario takes place  # noqa: E501

        :return: The location of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Environment.

        a general natural language description of where the scenario takes place  # noqa: E501

        :param location: The location of this Environment.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def visibility(self):
        """Gets the visibility of this Environment.  # noqa: E501

        an numeric indicator (0-1) of current visibility conditions; lower is darker  # noqa: E501

        :return: The visibility of this Environment.  # noqa: E501
        :rtype: float
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Environment.

        an numeric indicator (0-1) of current visibility conditions; lower is darker  # noqa: E501

        :param visibility: The visibility of this Environment.  # noqa: E501
        :type: float
        """

        self._visibility = visibility

    @property
    def noise_ambient(self):
        """Gets the noise_ambient of this Environment.  # noqa: E501

        an numeric indicator (0-1) of ambient noise at the scenario location; higher is louder  # noqa: E501

        :return: The noise_ambient of this Environment.  # noqa: E501
        :rtype: float
        """
        return self._noise_ambient

    @noise_ambient.setter
    def noise_ambient(self, noise_ambient):
        """Sets the noise_ambient of this Environment.

        an numeric indicator (0-1) of ambient noise at the scenario location; higher is louder  # noqa: E501

        :param noise_ambient: The noise_ambient of this Environment.  # noqa: E501
        :type: float
        """

        self._noise_ambient = noise_ambient

    @property
    def noise_peak(self):
        """Gets the noise_peak of this Environment.  # noqa: E501

        an numeric indicator (0-1) of peak noise at the scenario location; higher is louder  # noqa: E501

        :return: The noise_peak of this Environment.  # noqa: E501
        :rtype: float
        """
        return self._noise_peak

    @noise_peak.setter
    def noise_peak(self, noise_peak):
        """Sets the noise_peak of this Environment.

        an numeric indicator (0-1) of peak noise at the scenario location; higher is louder  # noqa: E501

        :param noise_peak: The noise_peak of this Environment.  # noqa: E501
        :type: float
        """

        self._noise_peak = noise_peak

    @property
    def threat_level(self):
        """Gets the threat_level of this Environment.  # noqa: E501

        an numeric indicator (0-1) of enemy threat level at the scenario location; higher is more dangerous  # noqa: E501

        :return: The threat_level of this Environment.  # noqa: E501
        :rtype: float
        """
        return self._threat_level

    @threat_level.setter
    def threat_level(self, threat_level):
        """Sets the threat_level of this Environment.

        an numeric indicator (0-1) of enemy threat level at the scenario location; higher is more dangerous  # noqa: E501

        :param threat_level: The threat_level of this Environment.  # noqa: E501
        :type: float
        """

        self._threat_level = threat_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Environment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Environment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
