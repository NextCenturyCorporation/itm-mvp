# coding: utf-8

"""
    ITM TA3 MVP API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  It is based on the OpenAPI 3.0 specification.  Some objects and operations are not necessarily planned for the MVP, but are currently present for fostering discussion.  The API is currently in an early/draft state, even for an MVP.  # noqa: E501

    OpenAPI spec version: 0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScenarioState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'elapsed_time': 'float',
        'patients': 'list[Patient]',
        'medical_supplies': 'list[MedicalSupply]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'elapsed_time': 'elapsedTime',
        'patients': 'patients',
        'medical_supplies': 'medical_supplies'
    }

    def __init__(self, id=None, name=None, elapsed_time=None, patients=None, medical_supplies=None):  # noqa: E501
        """ScenarioState - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._elapsed_time = None
        self._patients = None
        self._medical_supplies = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if patients is not None:
            self.patients = patients
        if medical_supplies is not None:
            self.medical_supplies = medical_supplies

    @property
    def id(self):
        """Gets the id of this ScenarioState.  # noqa: E501

        a unique id for the scenario  # noqa: E501

        :return: The id of this ScenarioState.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScenarioState.

        a unique id for the scenario  # noqa: E501

        :param id: The id of this ScenarioState.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ScenarioState.  # noqa: E501

        the scenario name  # noqa: E501

        :return: The name of this ScenarioState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScenarioState.

        the scenario name  # noqa: E501

        :param name: The name of this ScenarioState.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this ScenarioState.  # noqa: E501

        the elapsed time (in minutes) since the scenario started  # noqa: E501

        :return: The elapsed_time of this ScenarioState.  # noqa: E501
        :rtype: float
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this ScenarioState.

        the elapsed time (in minutes) since the scenario started  # noqa: E501

        :param elapsed_time: The elapsed_time of this ScenarioState.  # noqa: E501
        :type: float
        """

        self._elapsed_time = elapsed_time

    @property
    def patients(self):
        """Gets the patients of this ScenarioState.  # noqa: E501

        the list of patients in the scenario  # noqa: E501

        :return: The patients of this ScenarioState.  # noqa: E501
        :rtype: list[Patient]
        """
        return self._patients

    @patients.setter
    def patients(self, patients):
        """Sets the patients of this ScenarioState.

        the list of patients in the scenario  # noqa: E501

        :param patients: The patients of this ScenarioState.  # noqa: E501
        :type: list[Patient]
        """

        self._patients = patients

    @property
    def medical_supplies(self):
        """Gets the medical_supplies of this ScenarioState.  # noqa: E501

        a list of medical supplies available to the medic  # noqa: E501

        :return: The medical_supplies of this ScenarioState.  # noqa: E501
        :rtype: list[MedicalSupply]
        """
        return self._medical_supplies

    @medical_supplies.setter
    def medical_supplies(self, medical_supplies):
        """Sets the medical_supplies of this ScenarioState.

        a list of medical supplies available to the medic  # noqa: E501

        :param medical_supplies: The medical_supplies of this ScenarioState.  # noqa: E501
        :type: list[MedicalSupply]
        """

        self._medical_supplies = medical_supplies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScenarioState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
