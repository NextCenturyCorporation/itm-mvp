# coding: utf-8

"""
    ITM MVP TA3 API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  Currently, there is an Evaluation API for TA2 and a preliminary scenario/probe submission API for TA1 that won't be used in the MVP, and currently lacks an API regarding sending probe responses and receiving alignment scores from TA1.  The API is based on the OpenAPI 3.0 specification.  Some aspects of this API are not necessarily planned to be implemented for MVP, but show the direction we are heading.  # noqa: E501

    OpenAPI spec version: 0.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Scenario(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'session_complete': 'bool',
        'start_time': 'str',
        'state': 'State',
        'triage_categories': 'list[TriageCategory]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'session_complete': 'session_complete',
        'start_time': 'startTime',
        'state': 'state',
        'triage_categories': 'triage_categories'
    }

    def __init__(self, id='1234', name=None, session_complete=None, start_time=None, state=None, triage_categories=None):  # noqa: E501
        """Scenario - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._session_complete = None
        self._start_time = None
        self._state = None
        self._triage_categories = None
        self.discriminator = None
        self.id = id
        self.name = name
        if session_complete is not None:
            self.session_complete = session_complete
        if start_time is not None:
            self.start_time = start_time
        if state is not None:
            self.state = state
        if triage_categories is not None:
            self.triage_categories = triage_categories

    @property
    def id(self):
        """Gets the id of this Scenario.  # noqa: E501

        a globally unique id for the scenario  # noqa: E501

        :return: The id of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scenario.

        a globally unique id for the scenario  # noqa: E501

        :param id: The id of this Scenario.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Scenario.  # noqa: E501

        human-readable scenario name, not necessarily unique  # noqa: E501

        :return: The name of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Scenario.

        human-readable scenario name, not necessarily unique  # noqa: E501

        :param name: The name of this Scenario.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def session_complete(self):
        """Gets the session_complete of this Scenario.  # noqa: E501

        set to true if the session is complete; that is, there are no more scenarios  # noqa: E501

        :return: The session_complete of this Scenario.  # noqa: E501
        :rtype: bool
        """
        return self._session_complete

    @session_complete.setter
    def session_complete(self, session_complete):
        """Sets the session_complete of this Scenario.

        set to true if the session is complete; that is, there are no more scenarios  # noqa: E501

        :param session_complete: The session_complete of this Scenario.  # noqa: E501
        :type: bool
        """

        self._session_complete = session_complete

    @property
    def start_time(self):
        """Gets the start_time of this Scenario.  # noqa: E501

        the wall clock local start time of the scenario, expressed as hh:mm  # noqa: E501

        :return: The start_time of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Scenario.

        the wall clock local start time of the scenario, expressed as hh:mm  # noqa: E501

        :param start_time: The start_time of this Scenario.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Scenario.  # noqa: E501


        :return: The state of this Scenario.  # noqa: E501
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Scenario.


        :param state: The state of this Scenario.  # noqa: E501
        :type: State
        """

        self._state = state

    @property
    def triage_categories(self):
        """Gets the triage_categories of this Scenario.  # noqa: E501


        :return: The triage_categories of this Scenario.  # noqa: E501
        :rtype: list[TriageCategory]
        """
        return self._triage_categories

    @triage_categories.setter
    def triage_categories(self, triage_categories):
        """Sets the triage_categories of this Scenario.


        :param triage_categories: The triage_categories of this Scenario.  # noqa: E501
        :type: list[TriageCategory]
        """

        self._triage_categories = triage_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Scenario, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scenario):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
