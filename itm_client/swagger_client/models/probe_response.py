# coding: utf-8

"""
    ITM MVP TA3 API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  Currently, there is an Evaluation API for TA2 and a preliminary scenario/probe submission API for TA1 that won't be used in the MVP, and currently lacks an API regarding sending probe responses and receiving alignment scores from TA1.  The API is based on the OpenAPI 3.0 specification.  Some objects and operations are not necessarily planned to be implemented for MVP, but show the direction we are heading.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProbeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scenario_id': 'str',
        'probe_id': 'str',
        'choice': 'str',
        'justification': 'str'
    }

    attribute_map = {
        'scenario_id': 'scenario_id',
        'probe_id': 'probe_id',
        'choice': 'choice',
        'justification': 'justification'
    }

    def __init__(self, scenario_id=None, probe_id=None, choice=None, justification=None):  # noqa: E501
        """ProbeResponse - a model defined in Swagger"""  # noqa: E501
        self._scenario_id = None
        self._probe_id = None
        self._choice = None
        self._justification = None
        self.discriminator = None
        self.scenario_id = scenario_id
        self.probe_id = probe_id
        self.choice = choice
        if justification is not None:
            self.justification = justification

    @property
    def scenario_id(self):
        """Gets the scenario_id of this ProbeResponse.  # noqa: E501

        globally unique scenario ID  # noqa: E501

        :return: The scenario_id of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this ProbeResponse.

        globally unique scenario ID  # noqa: E501

        :param scenario_id: The scenario_id of this ProbeResponse.  # noqa: E501
        :type: str
        """
        if scenario_id is None:
            raise ValueError("Invalid value for `scenario_id`, must not be `None`")  # noqa: E501

        self._scenario_id = scenario_id

    @property
    def probe_id(self):
        """Gets the probe_id of this ProbeResponse.  # noqa: E501

        globally unique probe ID  # noqa: E501

        :return: The probe_id of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._probe_id

    @probe_id.setter
    def probe_id(self, probe_id):
        """Sets the probe_id of this ProbeResponse.

        globally unique probe ID  # noqa: E501

        :param probe_id: The probe_id of this ProbeResponse.  # noqa: E501
        :type: str
        """
        if probe_id is None:
            raise ValueError("Invalid value for `probe_id`, must not be `None`")  # noqa: E501

        self._probe_id = probe_id

    @property
    def choice(self):
        """Gets the choice of this ProbeResponse.  # noqa: E501

        id of choice made (from ProbeOption)  # noqa: E501

        :return: The choice of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._choice

    @choice.setter
    def choice(self, choice):
        """Sets the choice of this ProbeResponse.

        id of choice made (from ProbeOption)  # noqa: E501

        :param choice: The choice of this ProbeResponse.  # noqa: E501
        :type: str
        """
        if choice is None:
            raise ValueError("Invalid value for `choice`, must not be `None`")  # noqa: E501

        self._choice = choice

    @property
    def justification(self):
        """Gets the justification of this ProbeResponse.  # noqa: E501

        A justification of the response to the probe  # noqa: E501

        :return: The justification of this ProbeResponse.  # noqa: E501
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification):
        """Sets the justification of this ProbeResponse.

        A justification of the response to the probe  # noqa: E501

        :param justification: The justification of this ProbeResponse.  # noqa: E501
        :type: str
        """

        self._justification = justification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProbeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProbeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
