# coding: utf-8

"""
    ITM MVP TA3 API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  Currently, there is an Evaluation API for TA2 and a preliminary scenario/probe submission API for TA1 that won't be used in the MVP, and currently lacks an API regarding sending probe responses and receiving alignment scores from TA1.  The API is based on the OpenAPI 3.0 specification.  Some aspects of this API are not necessarily planned to be implemented for MVP, but show the direction we are heading.  # noqa: E501

    OpenAPI spec version: 0.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vitals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hrpmin': 'int',
        'mm_hg': 'int',
        'rr': 'int',
        'sp_o2': 'int',
        'pain': 'int'
    }

    attribute_map = {
        'hrpmin': 'hrpmin',
        'mm_hg': 'mmHg',
        'rr': 'RR',
        'sp_o2': 'SpO2%',
        'pain': 'pain'
    }

    def __init__(self, hrpmin=None, mm_hg=None, rr=None, sp_o2=None, pain=None):  # noqa: E501
        """Vitals - a model defined in Swagger"""  # noqa: E501
        self._hrpmin = None
        self._mm_hg = None
        self._rr = None
        self._sp_o2 = None
        self._pain = None
        self.discriminator = None
        if hrpmin is not None:
            self.hrpmin = hrpmin
        if mm_hg is not None:
            self.mm_hg = mm_hg
        if rr is not None:
            self.rr = rr
        if sp_o2 is not None:
            self.sp_o2 = sp_o2
        if pain is not None:
            self.pain = pain

    @property
    def hrpmin(self):
        """Gets the hrpmin of this Vitals.  # noqa: E501

        heart rate in beats per minute  # noqa: E501

        :return: The hrpmin of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._hrpmin

    @hrpmin.setter
    def hrpmin(self, hrpmin):
        """Sets the hrpmin of this Vitals.

        heart rate in beats per minute  # noqa: E501

        :param hrpmin: The hrpmin of this Vitals.  # noqa: E501
        :type: int
        """

        self._hrpmin = hrpmin

    @property
    def mm_hg(self):
        """Gets the mm_hg of this Vitals.  # noqa: E501

        blood pressure in mmHg  # noqa: E501

        :return: The mm_hg of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._mm_hg

    @mm_hg.setter
    def mm_hg(self, mm_hg):
        """Sets the mm_hg of this Vitals.

        blood pressure in mmHg  # noqa: E501

        :param mm_hg: The mm_hg of this Vitals.  # noqa: E501
        :type: int
        """

        self._mm_hg = mm_hg

    @property
    def rr(self):
        """Gets the rr of this Vitals.  # noqa: E501

        respiratory rate in breaths/minute  # noqa: E501

        :return: The rr of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._rr

    @rr.setter
    def rr(self, rr):
        """Sets the rr of this Vitals.

        respiratory rate in breaths/minute  # noqa: E501

        :param rr: The rr of this Vitals.  # noqa: E501
        :type: int
        """

        self._rr = rr

    @property
    def sp_o2(self):
        """Gets the sp_o2 of this Vitals.  # noqa: E501

        Oxygen saturation level, expressed as a percentage  # noqa: E501

        :return: The sp_o2 of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._sp_o2

    @sp_o2.setter
    def sp_o2(self, sp_o2):
        """Sets the sp_o2 of this Vitals.

        Oxygen saturation level, expressed as a percentage  # noqa: E501

        :param sp_o2: The sp_o2 of this Vitals.  # noqa: E501
        :type: int
        """

        self._sp_o2 = sp_o2

    @property
    def pain(self):
        """Gets the pain of this Vitals.  # noqa: E501

        1-10 scale, omit if unknown or unconscious  # noqa: E501

        :return: The pain of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._pain

    @pain.setter
    def pain(self, pain):
        """Sets the pain of this Vitals.

        1-10 scale, omit if unknown or unconscious  # noqa: E501

        :param pain: The pain of this Vitals.  # noqa: E501
        :type: int
        """

        self._pain = pain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vitals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vitals):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
