# coding: utf-8

"""
    ITM TA3 MVP API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  It is based on the OpenAPI 3.0 specification.  Some objects and operations are not necessarily planned for the MVP, but are currently present for fostering discussion.  The API is currently in an draft state, even in the context of an MVP.  # noqa: E501

    OpenAPI spec version: 0.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vitals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'heart_rate': 'int',
        'blood_pressure': 'str',
        'respiratory_rate': 'int',
        'oxygen_level': 'int'
    }

    attribute_map = {
        'heart_rate': 'heart_rate',
        'blood_pressure': 'blood_pressure',
        'respiratory_rate': 'respiratory_rate',
        'oxygen_level': 'oxygen_level'
    }

    def __init__(self, heart_rate=None, blood_pressure=None, respiratory_rate=None, oxygen_level=None):  # noqa: E501
        """Vitals - a model defined in Swagger"""  # noqa: E501
        self._heart_rate = None
        self._blood_pressure = None
        self._respiratory_rate = None
        self._oxygen_level = None
        self.discriminator = None
        if heart_rate is not None:
            self.heart_rate = heart_rate
        if blood_pressure is not None:
            self.blood_pressure = blood_pressure
        if respiratory_rate is not None:
            self.respiratory_rate = respiratory_rate
        if oxygen_level is not None:
            self.oxygen_level = oxygen_level

    @property
    def heart_rate(self):
        """Gets the heart_rate of this Vitals.  # noqa: E501

        heart rate in beats per minute  # noqa: E501

        :return: The heart_rate of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._heart_rate

    @heart_rate.setter
    def heart_rate(self, heart_rate):
        """Sets the heart_rate of this Vitals.

        heart rate in beats per minute  # noqa: E501

        :param heart_rate: The heart_rate of this Vitals.  # noqa: E501
        :type: int
        """

        self._heart_rate = heart_rate

    @property
    def blood_pressure(self):
        """Gets the blood_pressure of this Vitals.  # noqa: E501

        blood pressure in systolic over diastolic, in mmHg  # noqa: E501

        :return: The blood_pressure of this Vitals.  # noqa: E501
        :rtype: str
        """
        return self._blood_pressure

    @blood_pressure.setter
    def blood_pressure(self, blood_pressure):
        """Sets the blood_pressure of this Vitals.

        blood pressure in systolic over diastolic, in mmHg  # noqa: E501

        :param blood_pressure: The blood_pressure of this Vitals.  # noqa: E501
        :type: str
        """

        self._blood_pressure = blood_pressure

    @property
    def respiratory_rate(self):
        """Gets the respiratory_rate of this Vitals.  # noqa: E501

        respiratory rate in breaths/minute  # noqa: E501

        :return: The respiratory_rate of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._respiratory_rate

    @respiratory_rate.setter
    def respiratory_rate(self, respiratory_rate):
        """Sets the respiratory_rate of this Vitals.

        respiratory rate in breaths/minute  # noqa: E501

        :param respiratory_rate: The respiratory_rate of this Vitals.  # noqa: E501
        :type: int
        """

        self._respiratory_rate = respiratory_rate

    @property
    def oxygen_level(self):
        """Gets the oxygen_level of this Vitals.  # noqa: E501

        Oxygen saturation level (Sp02%)  # noqa: E501

        :return: The oxygen_level of this Vitals.  # noqa: E501
        :rtype: int
        """
        return self._oxygen_level

    @oxygen_level.setter
    def oxygen_level(self, oxygen_level):
        """Sets the oxygen_level of this Vitals.

        Oxygen saturation level (Sp02%)  # noqa: E501

        :param oxygen_level: The oxygen_level of this Vitals.  # noqa: E501
        :type: int
        """

        self._oxygen_level = oxygen_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vitals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vitals):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
