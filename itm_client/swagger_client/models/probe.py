# coding: utf-8

"""
    ITM TA3 MVP API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  It is based on the OpenAPI 3.0 specification.  Some objects and operations are not necessarily planned for the MVP, but are currently present for fostering discussion.  The API is currently in an draft state, even in the context of an MVP.  # noqa: E501

    OpenAPI spec version: 0.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Probe(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'question': 'str',
        'patient_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'question': 'question',
        'patient_ids': 'patient_ids'
    }

    def __init__(self, id=None, question=None, patient_ids=None):  # noqa: E501
        """Probe - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._question = None
        self._patient_ids = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if question is not None:
            self.question = question
        if patient_ids is not None:
            self.patient_ids = patient_ids

    @property
    def id(self):
        """Gets the id of this Probe.  # noqa: E501

        an id for the probe, unique within the scenario  # noqa: E501

        :return: The id of this Probe.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Probe.

        an id for the probe, unique within the scenario  # noqa: E501

        :param id: The id of this Probe.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def question(self):
        """Gets the question of this Probe.  # noqa: E501

        a plain text natural language question for the decision-maker  # noqa: E501

        :return: The question of this Probe.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Probe.

        a plain text natural language question for the decision-maker  # noqa: E501

        :param question: The question of this Probe.  # noqa: E501
        :type: str
        """

        self._question = question

    @property
    def patient_ids(self):
        """Gets the patient_ids of this Probe.  # noqa: E501

        the list of valid patient ids for the decision-maker to choose among  # noqa: E501

        :return: The patient_ids of this Probe.  # noqa: E501
        :rtype: list[str]
        """
        return self._patient_ids

    @patient_ids.setter
    def patient_ids(self, patient_ids):
        """Sets the patient_ids of this Probe.

        the list of valid patient ids for the decision-maker to choose among  # noqa: E501

        :param patient_ids: The patient_ids of this Probe.  # noqa: E501
        :type: list[str]
        """

        self._patient_ids = patient_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Probe, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Probe):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
