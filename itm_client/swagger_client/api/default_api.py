# coding: utf-8

"""
    ITM TA3 MVP API

    This is the specification of a proposed TA3 API for the In The Moment (ITM) Minimum Viable Product (MVP).  It is based on the OpenAPI 3.0 specification.  Some objects and operations are not necessarily planned for the MVP, but are currently present for fostering discussion.  The API is currently in an early/draft state, even for an MVP.  # noqa: E501

    OpenAPI spec version: 0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_patient_heart_rate(self, scenario_id, patient_id, **kwargs):  # noqa: E501
        """Retrieve patient heart rate  # noqa: E501

        This is just here to discuss whether we will someday have/need this level of granularity, probably not for MVP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_patient_heart_rate(scenario_id, patient_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario containing the specified patient (required)
        :param str patient_id: The ID of the patient to for which to request heart rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_patient_heart_rate_with_http_info(scenario_id, patient_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_patient_heart_rate_with_http_info(scenario_id, patient_id, **kwargs)  # noqa: E501
            return data

    def get_patient_heart_rate_with_http_info(self, scenario_id, patient_id, **kwargs):  # noqa: E501
        """Retrieve patient heart rate  # noqa: E501

        This is just here to discuss whether we will someday have/need this level of granularity, probably not for MVP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_patient_heart_rate_with_http_info(scenario_id, patient_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario containing the specified patient (required)
        :param str patient_id: The ID of the patient to for which to request heart rate (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'patient_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patient_heart_rate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_patient_heart_rate`")  # noqa: E501
        # verify the required parameter 'patient_id' is set
        if ('patient_id' not in params or
                params['patient_id'] is None):
            raise ValueError("Missing the required parameter `patient_id` when calling `get_patient_heart_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scenario_id' in params:
            query_params.append(('scenario_id', params['scenario_id']))  # noqa: E501
        if 'patient_id' in params:
            query_params.append(('patient_id', params['patient_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/patient/getHeartRate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_patient_vitals(self, scenario_id, patient_id, **kwargs):  # noqa: E501
        """Retrieve all patient vital signs  # noqa: E501

        Retrieve all vital signs of the specified patient in the specified scenario.  May not need this for MVP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_patient_vitals(scenario_id, patient_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to request patient vitals (required)
        :param str patient_id: The ID of the patient to query (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_patient_vitals_with_http_info(scenario_id, patient_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_patient_vitals_with_http_info(scenario_id, patient_id, **kwargs)  # noqa: E501
            return data

    def get_patient_vitals_with_http_info(self, scenario_id, patient_id, **kwargs):  # noqa: E501
        """Retrieve all patient vital signs  # noqa: E501

        Retrieve all vital signs of the specified patient in the specified scenario.  May not need this for MVP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_patient_vitals_with_http_info(scenario_id, patient_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to request patient vitals (required)
        :param str patient_id: The ID of the patient to query (required)
        :return: Vitals
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id', 'patient_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patient_vitals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_patient_vitals`")  # noqa: E501
        # verify the required parameter 'patient_id' is set
        if ('patient_id' not in params or
                params['patient_id'] is None):
            raise ValueError("Missing the required parameter `patient_id` when calling `get_patient_vitals`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scenario_id' in params:
            query_params.append(('scenario_id', params['scenario_id']))  # noqa: E501
        if 'patient_id' in params:
            query_params.append(('patient_id', params['patient_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/patient/getVitals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vitals',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_probe(self, scenario_id, **kwargs):  # noqa: E501
        """Request the next probe  # noqa: E501

        Request the next probe of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_probe(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to request a probe (required)
        :return: Probe
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_probe_with_http_info(scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_probe_with_http_info(scenario_id, **kwargs)  # noqa: E501
            return data

    def get_probe_with_http_info(self, scenario_id, **kwargs):  # noqa: E501
        """Request the next probe  # noqa: E501

        Request the next probe of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_probe_with_http_info(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to request a probe (required)
        :return: Probe
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scenario_id' in params:
            query_params.append(('scenario_id', params['scenario_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scenario/probe', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Probe',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scenario_state(self, scenario_id, **kwargs):  # noqa: E501
        """Retrieve scenario state  # noqa: E501

        Retrieve state of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scenario_state(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to retrieve status (required)
        :return: ScenarioState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_scenario_state_with_http_info(scenario_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scenario_state_with_http_info(scenario_id, **kwargs)  # noqa: E501
            return data

    def get_scenario_state_with_http_info(self, scenario_id, **kwargs):  # noqa: E501
        """Retrieve scenario state  # noqa: E501

        Retrieve state of the scenario with the specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scenario_state_with_http_info(scenario_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scenario_id: The ID of the scenario for which to retrieve status (required)
        :return: ScenarioState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scenario_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scenario_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scenario_id' is set
        if ('scenario_id' not in params or
                params['scenario_id'] is None):
            raise ValueError("Missing the required parameter `scenario_id` when calling `get_scenario_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scenario_id' in params:
            query_params.append(('scenario_id', params['scenario_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scenario/getState', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def respond_to_probe(self, probe_id, patient_id, **kwargs):  # noqa: E501
        """Respond to a probe  # noqa: E501

        Respond to the specified probe with the specified patient_id (decision) and optional explanation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.respond_to_probe(probe_id, patient_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str probe_id: The ID of the probe to which to respond (required)
        :param str patient_id: The ID of the patient to treat (required)
        :param str explanation: An explanation of the response to the probe
        :return: ScenarioState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.respond_to_probe_with_http_info(probe_id, patient_id, **kwargs)  # noqa: E501
        else:
            (data) = self.respond_to_probe_with_http_info(probe_id, patient_id, **kwargs)  # noqa: E501
            return data

    def respond_to_probe_with_http_info(self, probe_id, patient_id, **kwargs):  # noqa: E501
        """Respond to a probe  # noqa: E501

        Respond to the specified probe with the specified patient_id (decision) and optional explanation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.respond_to_probe_with_http_info(probe_id, patient_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str probe_id: The ID of the probe to which to respond (required)
        :param str patient_id: The ID of the patient to treat (required)
        :param str explanation: An explanation of the response to the probe
        :return: ScenarioState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['probe_id', 'patient_id', 'explanation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method respond_to_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'probe_id' is set
        if ('probe_id' not in params or
                params['probe_id'] is None):
            raise ValueError("Missing the required parameter `probe_id` when calling `respond_to_probe`")  # noqa: E501
        # verify the required parameter 'patient_id' is set
        if ('patient_id' not in params or
                params['patient_id'] is None):
            raise ValueError("Missing the required parameter `patient_id` when calling `respond_to_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'probe_id' in params:
            query_params.append(('probe_id', params['probe_id']))  # noqa: E501
        if 'patient_id' in params:
            query_params.append(('patient_id', params['patient_id']))  # noqa: E501
        if 'explanation' in params:
            query_params.append(('explanation', params['explanation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scenario/probe', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_scenario(self, username, **kwargs):  # noqa: E501
        """Start a new scenario  # noqa: E501

        Start a new scenario with the specified username, returning a Scenario object and unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_scenario(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: A self-assigned user name.  Can add authentication later. (required)
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_scenario_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.start_scenario_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def start_scenario_with_http_info(self, username, **kwargs):  # noqa: E501
        """Start a new scenario  # noqa: E501

        Start a new scenario with the specified username, returning a Scenario object and unique id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_scenario_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: A self-assigned user name.  Can add authentication later. (required)
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_scenario" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `start_scenario`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scenario/start', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
