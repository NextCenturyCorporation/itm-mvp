# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.alignment_target_kdma_values import AlignmentTargetKdmaValues  # noqa: F401,E501
from swagger_server import util


class AlignmentTarget(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, kdma_values: List[AlignmentTargetKdmaValues]=None):  # noqa: E501
        """AlignmentTarget - a model defined in Swagger

        :param id: The id of this AlignmentTarget.  # noqa: E501
        :type id: str
        :param kdma_values: The kdma_values of this AlignmentTarget.  # noqa: E501
        :type kdma_values: List[AlignmentTargetKdmaValues]
        """
        self.swagger_types = {
            'id': str,
            'kdma_values': List[AlignmentTargetKdmaValues]
        }

        self.attribute_map = {
            'id': 'id',
            'kdma_values': 'kdma_values'
        }
        self._id = id
        self._kdma_values = kdma_values

    @classmethod
    def from_dict(cls, dikt) -> 'AlignmentTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlignmentTarget of this AlignmentTarget.  # noqa: E501
        :rtype: AlignmentTarget
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AlignmentTarget.

        globally unique alignment target  # noqa: E501

        :return: The id of this AlignmentTarget.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AlignmentTarget.

        globally unique alignment target  # noqa: E501

        :param id: The id of this AlignmentTarget.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kdma_values(self) -> List[AlignmentTargetKdmaValues]:
        """Gets the kdma_values of this AlignmentTarget.

        list of KDMAs to align to  # noqa: E501

        :return: The kdma_values of this AlignmentTarget.
        :rtype: List[AlignmentTargetKdmaValues]
        """
        return self._kdma_values

    @kdma_values.setter
    def kdma_values(self, kdma_values: List[AlignmentTargetKdmaValues]):
        """Sets the kdma_values of this AlignmentTarget.

        list of KDMAs to align to  # noqa: E501

        :param kdma_values: The kdma_values of this AlignmentTarget.
        :type kdma_values: List[AlignmentTargetKdmaValues]
        """
        if kdma_values is None:
            raise ValueError("Invalid value for `kdma_values`, must not be `None`")  # noqa: E501

        self._kdma_values = kdma_values
