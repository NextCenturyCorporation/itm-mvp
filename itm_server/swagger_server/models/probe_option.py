# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProbeOption(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, value: str=None, kdma_association: Dict[str, str]=None):  # noqa: E501
        """ProbeOption - a model defined in Swagger

        :param id: The id of this ProbeOption.  # noqa: E501
        :type id: str
        :param value: The value of this ProbeOption.  # noqa: E501
        :type value: str
        :param kdma_association: The kdma_association of this ProbeOption.  # noqa: E501
        :type kdma_association: Dict[str, str]
        """
        self.swagger_types = {
            'id': str,
            'value': str,
            'kdma_association': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'value': 'value',
            'kdma_association': 'kdma_association'
        }
        self._id = id
        self._value = value
        self._kdma_association = kdma_association

    @classmethod
    def from_dict(cls, dikt) -> 'ProbeOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProbeOption of this ProbeOption.  # noqa: E501
        :rtype: ProbeOption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ProbeOption.

        the choice id, having scenario scope  # noqa: E501

        :return: The id of this ProbeOption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ProbeOption.

        the choice id, having scenario scope  # noqa: E501

        :param id: The id of this ProbeOption.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def value(self) -> str:
        """Gets the value of this ProbeOption.

        a label for the choice  # noqa: E501

        :return: The value of this ProbeOption.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ProbeOption.

        a label for the choice  # noqa: E501

        :param value: The value of this ProbeOption.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def kdma_association(self) -> Dict[str, str]:
        """Gets the kdma_association of this ProbeOption.

        KDMA association of this option; always omitted in TA2 API.  # noqa: E501

        :return: The kdma_association of this ProbeOption.
        :rtype: Dict[str, str]
        """
        return self._kdma_association

    @kdma_association.setter
    def kdma_association(self, kdma_association: Dict[str, str]):
        """Sets the kdma_association of this ProbeOption.

        KDMA association of this option; always omitted in TA2 API.  # noqa: E501

        :param kdma_association: The kdma_association of this ProbeOption.
        :type kdma_association: Dict[str, str]
        """

        self._kdma_association = kdma_association
