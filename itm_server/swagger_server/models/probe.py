# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Probe(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, question: str=None, patient_ids: List[str]=None):  # noqa: E501
        """Probe - a model defined in Swagger

        :param id: The id of this Probe.  # noqa: E501
        :type id: str
        :param question: The question of this Probe.  # noqa: E501
        :type question: str
        :param patient_ids: The patient_ids of this Probe.  # noqa: E501
        :type patient_ids: List[str]
        """
        self.swagger_types = {
            'id': str,
            'question': str,
            'patient_ids': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'question': 'question',
            'patient_ids': 'patient_ids'
        }
        self._id = id
        self._question = question
        self._patient_ids = patient_ids

    @classmethod
    def from_dict(cls, dikt) -> 'Probe':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Probe of this Probe.  # noqa: E501
        :rtype: Probe
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Probe.

        an id for the probe, unique within the scenario  # noqa: E501

        :return: The id of this Probe.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Probe.

        an id for the probe, unique within the scenario  # noqa: E501

        :param id: The id of this Probe.
        :type id: str
        """

        self._id = id

    @property
    def question(self) -> str:
        """Gets the question of this Probe.

        a plain text natural language question for the decision-maker  # noqa: E501

        :return: The question of this Probe.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this Probe.

        a plain text natural language question for the decision-maker  # noqa: E501

        :param question: The question of this Probe.
        :type question: str
        """

        self._question = question

    @property
    def patient_ids(self) -> List[str]:
        """Gets the patient_ids of this Probe.

        the list of valid patient ids for the decision-maker to choose among  # noqa: E501

        :return: The patient_ids of this Probe.
        :rtype: List[str]
        """
        return self._patient_ids

    @patient_ids.setter
    def patient_ids(self, patient_ids: List[str]):
        """Sets the patient_ids of this Probe.

        the list of valid patient ids for the decision-maker to choose among  # noqa: E501

        :param patient_ids: The patient_ids of this Probe.
        :type patient_ids: List[str]
        """

        self._patient_ids = patient_ids
