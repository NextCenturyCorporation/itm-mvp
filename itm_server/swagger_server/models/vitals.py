# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Vitals(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, heart_rate: int=None, blood_pressure: str=None, respiratory_rate: int=None, oxygen_level: int=None):  # noqa: E501
        """Vitals - a model defined in Swagger

        :param heart_rate: The heart_rate of this Vitals.  # noqa: E501
        :type heart_rate: int
        :param blood_pressure: The blood_pressure of this Vitals.  # noqa: E501
        :type blood_pressure: str
        :param respiratory_rate: The respiratory_rate of this Vitals.  # noqa: E501
        :type respiratory_rate: int
        :param oxygen_level: The oxygen_level of this Vitals.  # noqa: E501
        :type oxygen_level: int
        """
        self.swagger_types = {
            'heart_rate': int,
            'blood_pressure': str,
            'respiratory_rate': int,
            'oxygen_level': int
        }

        self.attribute_map = {
            'heart_rate': 'heart_rate',
            'blood_pressure': 'blood_pressure',
            'respiratory_rate': 'respiratory_rate',
            'oxygen_level': 'oxygen_level'
        }
        self._heart_rate = heart_rate
        self._blood_pressure = blood_pressure
        self._respiratory_rate = respiratory_rate
        self._oxygen_level = oxygen_level

    @classmethod
    def from_dict(cls, dikt) -> 'Vitals':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Vitals of this Vitals.  # noqa: E501
        :rtype: Vitals
        """
        return util.deserialize_model(dikt, cls)

    @property
    def heart_rate(self) -> int:
        """Gets the heart_rate of this Vitals.

        heart rate in beats per minute  # noqa: E501

        :return: The heart_rate of this Vitals.
        :rtype: int
        """
        return self._heart_rate

    @heart_rate.setter
    def heart_rate(self, heart_rate: int):
        """Sets the heart_rate of this Vitals.

        heart rate in beats per minute  # noqa: E501

        :param heart_rate: The heart_rate of this Vitals.
        :type heart_rate: int
        """

        self._heart_rate = heart_rate

    @property
    def blood_pressure(self) -> str:
        """Gets the blood_pressure of this Vitals.

        blood pressure in systolic over diastolic, in mmHg  # noqa: E501

        :return: The blood_pressure of this Vitals.
        :rtype: str
        """
        return self._blood_pressure

    @blood_pressure.setter
    def blood_pressure(self, blood_pressure: str):
        """Sets the blood_pressure of this Vitals.

        blood pressure in systolic over diastolic, in mmHg  # noqa: E501

        :param blood_pressure: The blood_pressure of this Vitals.
        :type blood_pressure: str
        """

        self._blood_pressure = blood_pressure

    @property
    def respiratory_rate(self) -> int:
        """Gets the respiratory_rate of this Vitals.

        respiratory rate in breaths/minute  # noqa: E501

        :return: The respiratory_rate of this Vitals.
        :rtype: int
        """
        return self._respiratory_rate

    @respiratory_rate.setter
    def respiratory_rate(self, respiratory_rate: int):
        """Sets the respiratory_rate of this Vitals.

        respiratory rate in breaths/minute  # noqa: E501

        :param respiratory_rate: The respiratory_rate of this Vitals.
        :type respiratory_rate: int
        """

        self._respiratory_rate = respiratory_rate

    @property
    def oxygen_level(self) -> int:
        """Gets the oxygen_level of this Vitals.

        Oxygen saturation level (Sp02%)  # noqa: E501

        :return: The oxygen_level of this Vitals.
        :rtype: int
        """
        return self._oxygen_level

    @oxygen_level.setter
    def oxygen_level(self, oxygen_level: int):
        """Sets the oxygen_level of this Vitals.

        Oxygen saturation level (Sp02%)  # noqa: E501

        :param oxygen_level: The oxygen_level of this Vitals.
        :type oxygen_level: int
        """

        self._oxygen_level = oxygen_level
