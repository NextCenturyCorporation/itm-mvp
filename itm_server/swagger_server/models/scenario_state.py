# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.medical_supply import MedicalSupply  # noqa: F401,E501
from swagger_server.models.patient import Patient  # noqa: F401,E501
from swagger_server import util


class ScenarioState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, elapsed_time: float=None, scenario_complete: bool=None, patients: List[Patient]=None, medical_supplies: List[MedicalSupply]=None):  # noqa: E501
        """ScenarioState - a model defined in Swagger

        :param id: The id of this ScenarioState.  # noqa: E501
        :type id: str
        :param name: The name of this ScenarioState.  # noqa: E501
        :type name: str
        :param elapsed_time: The elapsed_time of this ScenarioState.  # noqa: E501
        :type elapsed_time: float
        :param scenario_complete: The scenario_complete of this ScenarioState.  # noqa: E501
        :type scenario_complete: bool
        :param patients: The patients of this ScenarioState.  # noqa: E501
        :type patients: List[Patient]
        :param medical_supplies: The medical_supplies of this ScenarioState.  # noqa: E501
        :type medical_supplies: List[MedicalSupply]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'elapsed_time': float,
            'scenario_complete': bool,
            'patients': List[Patient],
            'medical_supplies': List[MedicalSupply]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'elapsed_time': 'elapsedTime',
            'scenario_complete': 'scenario_complete',
            'patients': 'patients',
            'medical_supplies': 'medical_supplies'
        }
        self._id = id
        self._name = name
        self._elapsed_time = elapsed_time
        self._scenario_complete = scenario_complete
        self._patients = patients
        self._medical_supplies = medical_supplies

    @classmethod
    def from_dict(cls, dikt) -> 'ScenarioState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScenarioState of this ScenarioState.  # noqa: E501
        :rtype: ScenarioState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ScenarioState.

        a unique id for the scenario  # noqa: E501

        :return: The id of this ScenarioState.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScenarioState.

        a unique id for the scenario  # noqa: E501

        :param id: The id of this ScenarioState.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this ScenarioState.

        the scenario name  # noqa: E501

        :return: The name of this ScenarioState.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ScenarioState.

        the scenario name  # noqa: E501

        :param name: The name of this ScenarioState.
        :type name: str
        """

        self._name = name

    @property
    def elapsed_time(self) -> float:
        """Gets the elapsed_time of this ScenarioState.

        the elapsed time (in minutes) since the scenario started  # noqa: E501

        :return: The elapsed_time of this ScenarioState.
        :rtype: float
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time: float):
        """Sets the elapsed_time of this ScenarioState.

        the elapsed time (in minutes) since the scenario started  # noqa: E501

        :param elapsed_time: The elapsed_time of this ScenarioState.
        :type elapsed_time: float
        """

        self._elapsed_time = elapsed_time

    @property
    def scenario_complete(self) -> bool:
        """Gets the scenario_complete of this ScenarioState.

        set to true if the scenario is complete; subsequent calls to /scenario/probe will return an error code  # noqa: E501

        :return: The scenario_complete of this ScenarioState.
        :rtype: bool
        """
        return self._scenario_complete

    @scenario_complete.setter
    def scenario_complete(self, scenario_complete: bool):
        """Sets the scenario_complete of this ScenarioState.

        set to true if the scenario is complete; subsequent calls to /scenario/probe will return an error code  # noqa: E501

        :param scenario_complete: The scenario_complete of this ScenarioState.
        :type scenario_complete: bool
        """

        self._scenario_complete = scenario_complete

    @property
    def patients(self) -> List[Patient]:
        """Gets the patients of this ScenarioState.

        the list of patients in the scenario  # noqa: E501

        :return: The patients of this ScenarioState.
        :rtype: List[Patient]
        """
        return self._patients

    @patients.setter
    def patients(self, patients: List[Patient]):
        """Sets the patients of this ScenarioState.

        the list of patients in the scenario  # noqa: E501

        :param patients: The patients of this ScenarioState.
        :type patients: List[Patient]
        """

        self._patients = patients

    @property
    def medical_supplies(self) -> List[MedicalSupply]:
        """Gets the medical_supplies of this ScenarioState.

        a list of medical supplies available to the medic  # noqa: E501

        :return: The medical_supplies of this ScenarioState.
        :rtype: List[MedicalSupply]
        """
        return self._medical_supplies

    @medical_supplies.setter
    def medical_supplies(self, medical_supplies: List[MedicalSupply]):
        """Sets the medical_supplies of this ScenarioState.

        a list of medical supplies available to the medic  # noqa: E501

        :param medical_supplies: The medical_supplies of this ScenarioState.
        :type medical_supplies: List[MedicalSupply]
        """

        self._medical_supplies = medical_supplies
