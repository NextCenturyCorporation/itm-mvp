# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.injury import Injury  # noqa: F401,E501
from swagger_server.models.vitals import Vitals  # noqa: F401,E501
from swagger_server import util


class Patient(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, age: int=None, sex: str=None, injuries: List[Injury]=None, vitals: Vitals=None, mental_status: str=None, assessed: bool=None, tag: str=None):  # noqa: E501
        """Patient - a model defined in Swagger

        :param id: The id of this Patient.  # noqa: E501
        :type id: str
        :param name: The name of this Patient.  # noqa: E501
        :type name: str
        :param age: The age of this Patient.  # noqa: E501
        :type age: int
        :param sex: The sex of this Patient.  # noqa: E501
        :type sex: str
        :param injuries: The injuries of this Patient.  # noqa: E501
        :type injuries: List[Injury]
        :param vitals: The vitals of this Patient.  # noqa: E501
        :type vitals: Vitals
        :param mental_status: The mental_status of this Patient.  # noqa: E501
        :type mental_status: str
        :param assessed: The assessed of this Patient.  # noqa: E501
        :type assessed: bool
        :param tag: The tag of this Patient.  # noqa: E501
        :type tag: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'age': int,
            'sex': str,
            'injuries': List[Injury],
            'vitals': Vitals,
            'mental_status': str,
            'assessed': bool,
            'tag': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'age': 'age',
            'sex': 'sex',
            'injuries': 'injuries',
            'vitals': 'vitals',
            'mental_status': 'mental_status',
            'assessed': 'assessed',
            'tag': 'tag'
        }
        self._id = id
        self._name = name
        self._age = age
        self._sex = sex
        self._injuries = injuries
        self._vitals = vitals
        self._mental_status = mental_status
        self._assessed = assessed
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'Patient':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Patient of this Patient.  # noqa: E501
        :rtype: Patient
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Patient.

        the patient id, having scenario scope  # noqa: E501

        :return: The id of this Patient.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Patient.

        the patient id, having scenario scope  # noqa: E501

        :param id: The id of this Patient.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Patient.

        the name of the patient  # noqa: E501

        :return: The name of this Patient.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Patient.

        the name of the patient  # noqa: E501

        :param name: The name of this Patient.
        :type name: str
        """

        self._name = name

    @property
    def age(self) -> int:
        """Gets the age of this Patient.

        the age of the patient  # noqa: E501

        :return: The age of this Patient.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this Patient.

        the age of the patient  # noqa: E501

        :param age: The age of this Patient.
        :type age: int
        """

        self._age = age

    @property
    def sex(self) -> str:
        """Gets the sex of this Patient.

        the sex of the patient, or unknown  # noqa: E501

        :return: The sex of this Patient.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex: str):
        """Sets the sex of this Patient.

        the sex of the patient, or unknown  # noqa: E501

        :param sex: The sex of this Patient.
        :type sex: str
        """
        allowed_values = ["male", "female", "unknown"]  # noqa: E501
        if sex not in allowed_values:
            raise ValueError(
                "Invalid value for `sex` ({0}), must be one of {1}"
                .format(sex, allowed_values)
            )

        self._sex = sex

    @property
    def injuries(self) -> List[Injury]:
        """Gets the injuries of this Patient.

        an array of patient injuries  # noqa: E501

        :return: The injuries of this Patient.
        :rtype: List[Injury]
        """
        return self._injuries

    @injuries.setter
    def injuries(self, injuries: List[Injury]):
        """Sets the injuries of this Patient.

        an array of patient injuries  # noqa: E501

        :param injuries: The injuries of this Patient.
        :type injuries: List[Injury]
        """

        self._injuries = injuries

    @property
    def vitals(self) -> Vitals:
        """Gets the vitals of this Patient.


        :return: The vitals of this Patient.
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals: Vitals):
        """Sets the vitals of this Patient.


        :param vitals: The vitals of this Patient.
        :type vitals: Vitals
        """

        self._vitals = vitals

    @property
    def mental_status(self) -> str:
        """Gets the mental_status of this Patient.

        mood and apparent mental state  # noqa: E501

        :return: The mental_status of this Patient.
        :rtype: str
        """
        return self._mental_status

    @mental_status.setter
    def mental_status(self, mental_status: str):
        """Sets the mental_status of this Patient.

        mood and apparent mental state  # noqa: E501

        :param mental_status: The mental_status of this Patient.
        :type mental_status: str
        """
        allowed_values = ["calm", "confused", "upset", "agony", "unresponsive"]  # noqa: E501
        if mental_status not in allowed_values:
            raise ValueError(
                "Invalid value for `mental_status` ({0}), must be one of {1}"
                .format(mental_status, allowed_values)
            )

        self._mental_status = mental_status

    @property
    def assessed(self) -> bool:
        """Gets the assessed of this Patient.

        whether or not this patient has been assessed in the current scenario  # noqa: E501

        :return: The assessed of this Patient.
        :rtype: bool
        """
        return self._assessed

    @assessed.setter
    def assessed(self, assessed: bool):
        """Sets the assessed of this Patient.

        whether or not this patient has been assessed in the current scenario  # noqa: E501

        :param assessed: The assessed of this Patient.
        :type assessed: bool
        """

        self._assessed = assessed

    @property
    def tag(self) -> str:
        """Gets the tag of this Patient.

        the tag assigned to this patient, or none if untagged  # noqa: E501

        :return: The tag of this Patient.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag: str):
        """Sets the tag of this Patient.

        the tag assigned to this patient, or none if untagged  # noqa: E501

        :param tag: The tag of this Patient.
        :type tag: str
        """
        allowed_values = ["none", "minimal", "delayed", "immediate", "expectant", "deceased"]  # noqa: E501
        if tag not in allowed_values:
            raise ValueError(
                "Invalid value for `tag` ({0}), must be one of {1}"
                .format(tag, allowed_values)
            )

        self._tag = tag
