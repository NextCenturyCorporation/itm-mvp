# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.environment import Environment  # noqa: F401,E501
from swagger_server.models.medical_supply import MedicalSupply  # noqa: F401,E501
from swagger_server.models.patient import Patient  # noqa: F401,E501
from swagger_server.models.triage_category import TriageCategory  # noqa: F401,E501
from swagger_server import util


class Scenario(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, description: str=None, start_time: str=None, environment: Environment=None, patients: List[Patient]=None, medical_supplies: List[MedicalSupply]=None, triage_categories: List[TriageCategory]=None):  # noqa: E501
        """Scenario - a model defined in Swagger

        :param id: The id of this Scenario.  # noqa: E501
        :type id: str
        :param name: The name of this Scenario.  # noqa: E501
        :type name: str
        :param description: The description of this Scenario.  # noqa: E501
        :type description: str
        :param start_time: The start_time of this Scenario.  # noqa: E501
        :type start_time: str
        :param environment: The environment of this Scenario.  # noqa: E501
        :type environment: Environment
        :param patients: The patients of this Scenario.  # noqa: E501
        :type patients: List[Patient]
        :param medical_supplies: The medical_supplies of this Scenario.  # noqa: E501
        :type medical_supplies: List[MedicalSupply]
        :param triage_categories: The triage_categories of this Scenario.  # noqa: E501
        :type triage_categories: List[TriageCategory]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'description': str,
            'start_time': str,
            'environment': Environment,
            'patients': List[Patient],
            'medical_supplies': List[MedicalSupply],
            'triage_categories': List[TriageCategory]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'start_time': 'startTime',
            'environment': 'environment',
            'patients': 'patients',
            'medical_supplies': 'medical_supplies',
            'triage_categories': 'triage_categories'
        }
        self._id = id
        self._name = name
        self._description = description
        self._start_time = start_time
        self._environment = environment
        self._patients = patients
        self._medical_supplies = medical_supplies
        self._triage_categories = triage_categories

    @classmethod
    def from_dict(cls, dikt) -> 'Scenario':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Scenario of this Scenario.  # noqa: E501
        :rtype: Scenario
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Scenario.

        a unique id for the scenario  # noqa: E501

        :return: The id of this Scenario.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Scenario.

        a unique id for the scenario  # noqa: E501

        :param id: The id of this Scenario.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Scenario.

        the scenario name  # noqa: E501

        :return: The name of this Scenario.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Scenario.

        the scenario name  # noqa: E501

        :param name: The name of this Scenario.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Scenario.

        a plain text natural language description of the scenario  # noqa: E501

        :return: The description of this Scenario.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Scenario.

        a plain text natural language description of the scenario  # noqa: E501

        :param description: The description of this Scenario.
        :type description: str
        """

        self._description = description

    @property
    def start_time(self) -> str:
        """Gets the start_time of this Scenario.

        the wall clock local start time of the scenario, expressed as hh:mm  # noqa: E501

        :return: The start_time of this Scenario.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this Scenario.

        the wall clock local start time of the scenario, expressed as hh:mm  # noqa: E501

        :param start_time: The start_time of this Scenario.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def environment(self) -> Environment:
        """Gets the environment of this Scenario.


        :return: The environment of this Scenario.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment: Environment):
        """Sets the environment of this Scenario.


        :param environment: The environment of this Scenario.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def patients(self) -> List[Patient]:
        """Gets the patients of this Scenario.


        :return: The patients of this Scenario.
        :rtype: List[Patient]
        """
        return self._patients

    @patients.setter
    def patients(self, patients: List[Patient]):
        """Sets the patients of this Scenario.


        :param patients: The patients of this Scenario.
        :type patients: List[Patient]
        """

        self._patients = patients

    @property
    def medical_supplies(self) -> List[MedicalSupply]:
        """Gets the medical_supplies of this Scenario.


        :return: The medical_supplies of this Scenario.
        :rtype: List[MedicalSupply]
        """
        return self._medical_supplies

    @medical_supplies.setter
    def medical_supplies(self, medical_supplies: List[MedicalSupply]):
        """Sets the medical_supplies of this Scenario.


        :param medical_supplies: The medical_supplies of this Scenario.
        :type medical_supplies: List[MedicalSupply]
        """

        self._medical_supplies = medical_supplies

    @property
    def triage_categories(self) -> List[TriageCategory]:
        """Gets the triage_categories of this Scenario.


        :return: The triage_categories of this Scenario.
        :rtype: List[TriageCategory]
        """
        return self._triage_categories

    @triage_categories.setter
    def triage_categories(self, triage_categories: List[TriageCategory]):
        """Sets the triage_categories of this Scenario.


        :param triage_categories: The triage_categories of this Scenario.
        :type triage_categories: List[TriageCategory]
        """

        self._triage_categories = triage_categories
