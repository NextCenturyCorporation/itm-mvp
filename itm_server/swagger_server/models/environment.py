# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Environment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, weather: str=None, location: str=None, visibility: float=None, noise_ambient: float=None, noise_peak: float=None, threat_level: float=None):  # noqa: E501
        """Environment - a model defined in Swagger

        :param weather: The weather of this Environment.  # noqa: E501
        :type weather: str
        :param location: The location of this Environment.  # noqa: E501
        :type location: str
        :param visibility: The visibility of this Environment.  # noqa: E501
        :type visibility: float
        :param noise_ambient: The noise_ambient of this Environment.  # noqa: E501
        :type noise_ambient: float
        :param noise_peak: The noise_peak of this Environment.  # noqa: E501
        :type noise_peak: float
        :param threat_level: The threat_level of this Environment.  # noqa: E501
        :type threat_level: float
        """
        self.swagger_types = {
            'weather': str,
            'location': str,
            'visibility': float,
            'noise_ambient': float,
            'noise_peak': float,
            'threat_level': float
        }

        self.attribute_map = {
            'weather': 'weather',
            'location': 'location',
            'visibility': 'visibility',
            'noise_ambient': 'noise_ambient',
            'noise_peak': 'noise_peak',
            'threat_level': 'threat_level'
        }
        self._weather = weather
        self._location = location
        self._visibility = visibility
        self._noise_ambient = noise_ambient
        self._noise_peak = noise_peak
        self._threat_level = threat_level

    @classmethod
    def from_dict(cls, dikt) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Environment of this Environment.  # noqa: E501
        :rtype: Environment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def weather(self) -> str:
        """Gets the weather of this Environment.

        a text description of local weather conditions  # noqa: E501

        :return: The weather of this Environment.
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather: str):
        """Sets the weather of this Environment.

        a text description of local weather conditions  # noqa: E501

        :param weather: The weather of this Environment.
        :type weather: str
        """

        self._weather = weather

    @property
    def location(self) -> str:
        """Gets the location of this Environment.

        a general natural language description of where the scenario takes place  # noqa: E501

        :return: The location of this Environment.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Environment.

        a general natural language description of where the scenario takes place  # noqa: E501

        :param location: The location of this Environment.
        :type location: str
        """

        self._location = location

    @property
    def visibility(self) -> float:
        """Gets the visibility of this Environment.

        an numeric indicator (0-1) of current visibility conditions; lower is darker  # noqa: E501

        :return: The visibility of this Environment.
        :rtype: float
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: float):
        """Sets the visibility of this Environment.

        an numeric indicator (0-1) of current visibility conditions; lower is darker  # noqa: E501

        :param visibility: The visibility of this Environment.
        :type visibility: float
        """

        self._visibility = visibility

    @property
    def noise_ambient(self) -> float:
        """Gets the noise_ambient of this Environment.

        an numeric indicator (0-1) of ambient noise at the scenario location; higher is louder  # noqa: E501

        :return: The noise_ambient of this Environment.
        :rtype: float
        """
        return self._noise_ambient

    @noise_ambient.setter
    def noise_ambient(self, noise_ambient: float):
        """Sets the noise_ambient of this Environment.

        an numeric indicator (0-1) of ambient noise at the scenario location; higher is louder  # noqa: E501

        :param noise_ambient: The noise_ambient of this Environment.
        :type noise_ambient: float
        """

        self._noise_ambient = noise_ambient

    @property
    def noise_peak(self) -> float:
        """Gets the noise_peak of this Environment.

        an numeric indicator (0-1) of peak noise at the scenario location; higher is louder  # noqa: E501

        :return: The noise_peak of this Environment.
        :rtype: float
        """
        return self._noise_peak

    @noise_peak.setter
    def noise_peak(self, noise_peak: float):
        """Sets the noise_peak of this Environment.

        an numeric indicator (0-1) of peak noise at the scenario location; higher is louder  # noqa: E501

        :param noise_peak: The noise_peak of this Environment.
        :type noise_peak: float
        """

        self._noise_peak = noise_peak

    @property
    def threat_level(self) -> float:
        """Gets the threat_level of this Environment.

        an numeric indicator (0-1) of enemy threat level at the scenario location; higher is more dangerous  # noqa: E501

        :return: The threat_level of this Environment.
        :rtype: float
        """
        return self._threat_level

    @threat_level.setter
    def threat_level(self, threat_level: float):
        """Sets the threat_level of this Environment.

        an numeric indicator (0-1) of enemy threat level at the scenario location; higher is more dangerous  # noqa: E501

        :param threat_level: The threat_level of this Environment.
        :type threat_level: float
        """

        self._threat_level = threat_level
